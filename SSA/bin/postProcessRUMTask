#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Cwd;
use CBIL::Util::Utils;
use Getopt::Long;



my($inputDir, $mainResultDir, $haveTranscripts,$genomeFastaFile, $geneAnnotationFile,$strandSpecific,$createJunctions,$readsFile,$qualFile,$topLevelSeqSizeFile,$createBigWigFile) = @_;

my $perlScriptsDir = "$ENV{GUS_HOME}/bin";

&GetOptions("mainResultDir=s" => \$mainResultDir,
            "genomeFastaFile=s" => \$genomeFastaFile, 
            "geneAnnotationFile=s" => \$geneAnnotationFile, 
            "perlScriptsDir=s" => \$perlScriptsDir, 
            "haveTranscripts!" => \$haveTranscripts, 
            "strandSpecific!" => \$strandSpecific, 
            "createJunctions!" => \$createJunctions, 
            "createBigWigFile!" => \$createBigWigFile, 
            "readsFile=s" => \$readsFile, 
            "qualFile=s" => \$qualFile, 
            "topLevelSeqSizeFile=s" => \$topLevelSeqSizeFile 
            );
die "You must provide a valid genomeFastaFile\n" unless -e "$genomeFastaFile";
die "You must provide a valid geneAnnotationFile\n" unless -e "$geneAnnotationFile";    
die "You must provide a valid readsFile\n" unless -e "$readsFile";    
die "You must provide a valid qualFile\n" unless -e "$qualFile";    
die "You must provide a valid topLevelSeqSizeFile\n" unless -e "$topLevelSeqSizeFile";    
my $currDir = `pwd`;
chomp $currDir;
chdir("$mainResultDir") || die "$!";
# concatenate files so are in order
my $date;
$date = `date`; chomp $date;
print STDERR "[$date] Concatenating RUM_Unique files\n";
my $numchunks = 0;
if(!$numchunks){ ## ie have not passed in the number of subtasks
  my @tmp = &sortResultFiles("RUM_Unique.sorted.*");
  if($tmp[-1] =~ /sorted\.(\d+)/){
    $numchunks = $1;
  }
}
print STDERR "number of chunks = 0\n" unless $numchunks;
if (!-e "$mainResultDir/RUM_Unique") {
  unlink("$mainResultDir/RUM_Unique.tmp");
  my @unique = &sortResultFiles('RUM_Unique.* | grep -v sorted');
  my $cnt_x = 0;
  if (scalar(@unique) != $numchunks && $cnt_x < 20) {
    sleep(5);
    @unique = &sortResultFiles('RUM_Unique.* | grep -v sorted');
    $cnt_x++;
  }    
  if (scalar(@unique) != $numchunks) {
    die "Not concatenating files: number of subtasks ($numchunks) differs from number of files (".scalar(@unique).") ($cnt_x)\n";
  }
  foreach my $f (@unique) {
    print STDERR "  Adding $f\n";
    &runCmd("cat $mainResultDir/$f >> $mainResultDir/RUM_Unique.tmp");
  }
  &runCmd("/bin/mv $mainResultDir/RUM_Unique.tmp $mainResultDir/RUM_Unique");
  foreach my $f (@unique) {
    unlink($f);
  }
} else {
  print STDERR "  DONE\n";
}

$date = `date`; chomp $date;
print STDERR "[$date] Concatenating RUM_NU files\n";
if (!-e "$mainResultDir/RUM_NU") {
  unlink("$mainResultDir/RUM_NU.tmp");
  my @nu = &sortResultFiles('RUM_NU.* | grep -v sorted');
  foreach my $f (@nu) {
    print STDERR "  Adding $f\n";
    &runCmd("cat $mainResultDir/$f >> $mainResultDir/RUM_NU.tmp");
    unlink($f);
  }
  &runCmd("/bin/mv $mainResultDir/RUM_NU.tmp $mainResultDir/RUM_NU");
  foreach my $f (@nu) {
    unlink($f);
  }
} else {
  print STDERR "  DONE\n";
}

if ($createBigWigFile){#create bigwig file

if (!-e "$mainResultDir/sam_header"){
	my %samheader;
	my @samheaders = &sortResultFiles('sam_header.*');
	foreach my $f (@samheaders) {
	    open(SAMHEADER, $f);
	    while (my $line = <SAMHEADER>) {
		chomp($line);
		$line =~ /SN:([^\s]+)\s/;
		$samheader{$1}=$line;
	    }
	    close(SAMHEADER);
	}
	open(SAMOUT, ">$mainResultDir/sam_header");
	foreach my $key (sort {cmpChrs($a,$b)} keys %samheader) {
	    my $shout = $samheader{$key};
	    print SAMOUT "$shout\n";
	}
	close(SAMOUT);
}

my $NumSeqs;
$date = `date`; chomp $date;
if(-e "$mainResultDir/RUM_sam.1"){  #createSAMFile=true, so need to concatenate RUM_sam.* to RUM.sam, and run samtools to create soreted bam file

    print STDERR "[$date] Concatenating RUM.sam files\n";
    if (!-e "$mainResultDir/RUM.sam") { 
	unlink("$mainResultDir/RUM.sam_tmp");

	foreach my $f (&sortResultFiles('RUM_sam.*')) {
	    print STDERR "  Adding $f\n";
	    &runCmd("cat $mainResultDir/$f >> $mainResultDir/RUM.sam_tmp");
	}
	&runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM.sam_tmp > $mainResultDir/RUM.sam");
        unlink("$mainResultDir/RUM.sam_tmp");

	foreach my $f (&sortResultFiles('RUM_sam.*')) {
	    unlink($f);
	}

	# I did the following because sometimes the file RUM.sam isn't written
	# by the time it reaches this, because of occasional turgid file system on the cluster.
	my $flag_x = 0;
	my $cnt_x = 0;
	while ($flag_x == 0) {
	    $cnt_x++;
	    if ($cnt_x > 100) {
		$flag_x = 1;
	    }
	    my $X = `tail -1 $mainResultDir/RUM.sam`;
	    $X =~ /^seq.(\d+)/;
	    $NumSeqs = $1;
	    if ($NumSeqs =~ /^\d+$/) {
		$flag_x = 1;
	    } else {
		sleep(5);
	    }
	}
    }
    $date = `date`; chomp $date;
    #print STDERR "[$date] running samtools on file to create sorted bam file\n";
    #if (!-e "$mainResultDir/RUM.bam") {
    #	unlink("$mainResultDir/RUM.bam_tmp");
    #	&runCmd("samtools view -b -S $mainResultDir/RUM.sam > $mainResultDir/RUM.bam_tmp");
    #	&runCmd("/bin/mv $mainResultDir/RUM.bam_tmp $mainResultDir/RUM.bam");
    #    }
    #    if (!-e "$mainResultDir/RUM.sorted.bam") {
    #	unlink("$mainResultDir/RUM.sorted_tmp.bam");
    #	&runCmd("samtools sort $mainResultDir/RUM.bam $mainResultDir/RUM.sorted_tmp");
    #	&runCmd("/bin/mv $mainResultDir/RUM.sorted_tmp.bam $mainResultDir/RUM.sorted.bam");
    #}
    #    if (!-e "$mainResultDir/RUM.sorted.bam.bai") {
    #	unlink("$mainResultDir/RUM.sorted.bam_tmp.bai");
    #	&runCmd("samtools index $mainResultDir/RUM.sorted.bam $mainResultDir/RUM.sorted.bam_tmp.bai");
    #	&runCmd("/bin/mv $mainResultDir/RUM.sorted.bam_tmp.bai $mainResultDir/RUM.sorted.bam.bai");
    #    }
}

$date = `date`; chomp $date;
print STDERR "[$date] Counting mapped reads\n";
if (!-e "$mainResultDir/mapping_stats.txt") {
  unlink("$mainResultDir/mapping_stats.txt.tmp");
  if(!$NumSeqs){
    $NumSeqs = 2000000;  ##normally have this value .. if not setting arbritrarily large ... don't know why needed. 
    print STDERR "WARNING: mapping_stats.txt will not have accurate percentages as setting arbritrary value for number of reads\n";
  }
  &runCmd("perl $perlScriptsDir/count_reads_mapped.pl $mainResultDir/RUM_Unique $mainResultDir/RUM_NU -minseq 1 -maxseq $NumSeqs > $mainResultDir/mapping_stats.txt.tmp 2>> $mainResultDir/PostProcessing-errorlog");
  &runCmd("/bin/mv $mainResultDir/mapping_stats.txt.tmp $mainResultDir/mapping_stats.txt");
}

if ($haveTranscripts) {
  $date = `date`; chomp $date;
  print STDERR "[$date] Merging blat and bowtie quantifications\n";
  if ($strandSpecific) {
    if (!-e "$mainResultDir/feature_quantifications.ps") {
      unlink("$mainResultDir/feature_quantifications.ps.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications.ps.tmp -strand ps -countsonly 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.ps.tmp $mainResultDir/feature_quantifications.ps");
    }
    if (!-e "$mainResultDir/feature_quantifications_normalized.ps") {
      unlink("$mainResultDir/feature_quantifications_normalized.ps.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications_normalized.ps.tmp -strand ps 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications_normalized.ps.tmp $mainResultDir/feature_quantifications_normalized.ps");
    }
    if (!-e "$mainResultDir/feature_quantifications.ms") {
      unlink("$mainResultDir/feature_quantifications.ms.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications.ms.tmp -strand ms -countsonly 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.ms.tmp $mainResultDir/feature_quantifications.ms");
    }
    if (!-e "$mainResultDir/feature_quantifications_normalized.ms") {
      unlink("$mainResultDir/feature_quantifications_normalized.ms.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications_normalized.ms.tmp -strand ms 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications_normalized.ms.tmp $mainResultDir/feature_quantifications_normalized.ms");
    }
          
    if (!-e "$mainResultDir/feature_quantifications.pa") {
      unlink("$mainResultDir/feature_quantifications.pa.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications.pa.tmp -strand pa -countsonly 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.pa.tmp $mainResultDir/feature_quantifications.pa");
    }
    if (!-e "$mainResultDir/feature_quantifications_normalized.pa") {
      unlink("$mainResultDir/feature_quantifications_normalized.pa.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications_normalized.pa.tmp -strand pa 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications_normalized.pa.tmp $mainResultDir/feature_quantifications_normalized.pa");
    }
          
    if (!-e "$mainResultDir/feature_quantifications.ma") {
      unlink("$mainResultDir/feature_quantifications.ma.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications.ma.tmp -strand ma -countsonly 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.ma.tmp $mainResultDir/feature_quantifications.ma");
    }
    if (!-e "$mainResultDir/feature_quantifications_normalized.ma") {
      unlink("$mainResultDir/feature_quantifications_normalized.ma.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications_normalized.ma.tmp -strand ma 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications_normalized.ma.tmp $mainResultDir/feature_quantifications_normalized.ma");
    }
          
    if (!-e "$mainResultDir/feature_counts") {
      unlink("$mainResultDir/feature_counts.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants_strandspecific.pl $mainResultDir/feature_quantifications.ps $mainResultDir/feature_quantifications.ms $mainResultDir/feature_quantifications.pa $mainResultDir/feature_quantifications.ma $geneAnnotationFile $mainResultDir/feature_counts.tmp 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_counts.tmp $mainResultDir/feature_counts");
    }
    if (!-e "$mainResultDir/feature_quantifications") {
      unlink("$mainResultDir/feature_quantifications.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants_strandspecific.pl $mainResultDir/feature_quantifications_normalized.ps $mainResultDir/feature_quantifications_normalized.ms $mainResultDir/feature_quantifications_normalized.pa $mainResultDir/feature_quantifications_normalized.ma $geneAnnotationFile $mainResultDir/feature_quantifications.tmp 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.tmp $mainResultDir/feature_quantifications");
    }
  } else {
    if (!-e "$mainResultDir/feature_counts") {
      unlink("$mainResultDir/feature_counts.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_counts.tmp -countsonly 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_counts.tmp $mainResultDir/feature_counts");
    }
    if (!-e "$mainResultDir/feature_quantifications") {
      unlink("$mainResultDir/feature_quantifications.tmp");
      &runCmd("perl $perlScriptsDir/merge_quants.pl $mainResultDir $numchunks $mainResultDir/feature_quantifications.tmp 2>> $mainResultDir/PostProcessing-errorlog");
      &runCmd("/bin/mv $mainResultDir/feature_quantifications.tmp $mainResultDir/feature_quantifications");
    }
  }
}

my $string;
$date = `date`; chomp $date;
print STDERR "[$date] Merging sorted RUM files\n";
if (!-e "$mainResultDir/RUM_Unique.sorted") {
  unlink("$mainResultDir/RUM_Unique.sorted_tmp");
  $string = "$mainResultDir/RUM_Unique.sorted_tmp";
  for (my $j=1; $j<$numchunks+1; $j++) {
    $string = $string . " $mainResultDir/RUM_Unique.sorted.$j";
  }
  &runCmd("perl $perlScriptsDir/merge_sorted_RUM_files.pl $string 2>> $mainResultDir/PostProcessing-errorlog");
  &runCmd("/bin/mv $mainResultDir/RUM_Unique.sorted_tmp $mainResultDir/RUM_Unique.sorted");
}
if (!-e "$mainResultDir/RUM_NU.sorted") {
  unlink("$mainResultDir/RUM_NU.sorted_tmp");
  $string = "$mainResultDir/RUM_NU.sorted_tmp";
  for (my $j=1; $j<$numchunks+1; $j++) {
    $string = $string . " $mainResultDir/RUM_NU.sorted.$j";
  }
  &runCmd("perl $perlScriptsDir/merge_sorted_RUM_files.pl $string 2>> $mainResultDir/PostProcessing-errorlog");
  &runCmd("/bin/mv $mainResultDir/RUM_NU.sorted_tmp $mainResultDir/RUM_NU.sorted");
}

# add counts of reads per chromosome to the mapping_stats.txt file:
$date = `date`; chomp $date;
print STDERR "[$date] Colating mapping stats\n";
if (!-e "$mainResultDir/mapping_stats.txt") {
  unlink("$mainResultDir/mapping_stats.txt.tmp");
  $string = "$mainResultDir/mapping_stats.txt.tmp";
  for (my $j=1; $j<$numchunks+1; $j++) {
    $string = $string . " $mainResultDir/chr_counts_u.$j";
  }
  &runCmd("perl $perlScriptsDir/merge_chr_counts.pl $string 2>> $mainResultDir/PostProcessing-errorlog");
  $string = "$mainResultDir/mapping_stats.txt.tmp";
  for (my $j=1; $j<$numchunks+1; $j++) {
    $string = $string . " $mainResultDir/chr_counts_nu.$j";
  }
  &runCmd("perl $perlScriptsDir/merge_chr_counts.pl $string 2>> $mainResultDir/PostProcessing-errorlog");
  &runCmd("/bin/mv $mainResultDir/mapping_stats.txt.tmp $mainResultDir/mapping_stats.txt");
}

if ($createJunctions) {
  $date = `date`; chomp $date;
  print STDERR "[$date] Creating junctions file\n";
  if (!-e "$mainResultDir/junctions_all.rum") {
    unlink("$mainResultDir/junctions_all.rum.tmp");
    &runCmd("perl $perlScriptsDir/make_RUM_junctions_file.pl $mainResultDir/RUM_Unique $mainResultDir/RUM_NU $genomeFastaFile $geneAnnotationFile $mainResultDir/junctions_all.rum.tmp $mainResultDir/junctions_all.bed $mainResultDir/junctions_high-quality.bed -faok 2>> $mainResultDir/PostProcessing-errorlog");
    &runCmd("/bin/mv $mainResultDir/junctions_all.rum.tmp $mainResultDir/junctions_all.rum");
  }
}

if ($strandSpecific) {
  $date = `date`; chomp $date;
  print STDERR "[$date] Making strand specific files\n";
  # breakup RUM_Unique into plus and minus, create unique_plus/minus sam/bam, sorted bam and BigWig
  if (!-e "$mainResultDir/RUM_Unique.sorted.plus") {
    unlink("$mainResultDir/RUM_Unique.sorted.plus.tmp");
    &runCmd("perl $perlScriptsDir/breakup_RUM_files_by_strand.pl $mainResultDir/RUM_Unique.sorted $mainResultDir/RUM_Unique.sorted.plus.tmp $mainResultDir/RUM_Unique.sorted.minus 2>> $mainResultDir/PostProcessing-errorlog");
    &runCmd("/bin/mv $mainResultDir/RUM_Unique.sorted.plus.tmp $mainResultDir/RUM_Unique.sorted.plus");
  }
    &runCmd("perl $perlScriptsDir/rum2sam.pl $mainResultDir/RUM_Unique.sorted.plus none $readsFile $qualFile $mainResultDir/RUM_Unique_plus.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");
    
    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_Unique_plus.sam_tmp > $mainResultDir/RUM_Unique_plus.sam");

    unlink("$mainResultDir/RUM_Unique_plus.sam_tmp");

   if (!-e "$mainResultDir/RUM_Unique_plus.bam") {
	unlink("$mainResultDir/RUM_Unique_plus.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_Unique_plus.sam > $mainResultDir/RUM_Unique_plus.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_plus.bam_tmp $mainResultDir/RUM_Unique_plus.bam");
    }
    if (!-e "$mainResultDir/RUM_Unique_plus.sorted.bam") {
	unlink("$mainResultDir/RUM_Unique_plus.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_Unique_plus.bam $mainResultDir/RUM_Unique_plus.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_plus.sorted_tmp.bam $mainResultDir/RUM_Unique_plus.sorted.bam");
	unlink("$mainResultDir/RUM_Unique_plus.bam");
    }

    if (!-e "$mainResultDir/RUM_Unique_plus.bedgraph") {
	unlink("$mainResultDir/RUM_Unique_plus.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_Unique_plus.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_Unique_plus.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_plus.bedgraph_tmp $mainResultDir/RUM_Unique_plus.bedgraph");
	unlink("$mainResultDir/RUM_Unique_plus.sorted.bam");
    }

    #if (!-e "$mainResultDir/RUM_Unique_plus.bw") {
    #	unlink("$mainResultDir/RUM_Unique_plus.bw_tmp");
    #	&runCmd("bedGraphToBigWig $mainResultDir/RUM_Unique_plus.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_Unique_plus.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
    #	&runCmd("/bin/mv $mainResultDir/RUM_Unique_plus.bw_tmp $mainResultDir/RUM_Unique_plus.bw");
    #    }

    &runCmd("perl $perlScriptsDir/rum2sam.pl $mainResultDir/RUM_Unique.sorted.minus none $readsFile $qualFile $mainResultDir/RUM_Unique_minus.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");

    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_Unique_minus.sam_tmp > $mainResultDir/RUM_Unique_minus.sam");
	unlink("$mainResultDir/RUM_Unique_minus.sam_tmp");
   if (!-e "$mainResultDir/RUM_Unique_minus.bam") {
	unlink("$mainResultDir/RUM_Unique_minus.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_Unique_minus.sam > $mainResultDir/RUM_Unique_minus.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_minus.bam_tmp $mainResultDir/RUM_Unique_minus.bam");
    }
    if (!-e "$mainResultDir/RUM_Unique_minus.sorted.bam") {
	unlink("$mainResultDir/RUM_Unique_minus.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_Unique_minus.bam $mainResultDir/RUM_Unique_minus.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_minus.sorted_tmp.bam $mainResultDir/RUM_Unique_minus.sorted.bam");
        unlink("$mainResultDir/RUM_Unique_minus.bam");
    }

    if (!-e "$mainResultDir/RUM_Unique_minus.bedgraph") {
	unlink("$mainResultDir/RUM_Unique_minus.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_Unique_minus.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_Unique_minus.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique_minus.bedgraph_tmp $mainResultDir/RUM_Unique_minus.bedgraph");
        unlink("$mainResultDir/RUM_Unique_minus.sorted.bam");
    }

    #if (!-e "$mainResultDir/RUM_Unique_minus.bw") {
    #	unlink("$mainResultDir/RUM_Unique_minus.bw_tmp");
    #	&runCmd("bedGraphToBigWig $mainResultDir/RUM_Unique_minus.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_Unique_minus.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
    #	&runCmd("/bin/mv $mainResultDir/RUM_Unique_minus.bw_tmp $mainResultDir/RUM_Unique_minus.bw");
    #    }

    # breakup RUM_NU into plus and minus, create NU_plus/minus sam/bam, sorted bam and BigWig
  if (!-e "$mainResultDir/RUM_NU.sorted.plus") {
    unlink("$mainResultDir/RUM_NU.sorted.plus.tmp");
    &runCmd("perl $perlScriptsDir/breakup_RUM_files_by_strand.pl $mainResultDir/RUM_NU.sorted $mainResultDir/RUM_NU.sorted.plus.tmp $mainResultDir/RUM_NU.sorted.minus 2>> $mainResultDir/PostProcessing-errorlog");
    &runCmd("/bin/mv $mainResultDir/RUM_NU.sorted.plus.tmp $mainResultDir/RUM_NU.sorted.plus");
  }
    &runCmd("perl $perlScriptsDir/rum2sam.pl none $mainResultDir/RUM_NU.sorted.plus $readsFile $qualFile $mainResultDir/RUM_NU_plus.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");

    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_NU_plus.sam_tmp > $mainResultDir/RUM_NU_plus.sam");

    unlink("$mainResultDir/RUM_NU_plus.sam_tmp");

    &runCmd("perl $perlScriptsDir/rum2sam.pl none $mainResultDir/RUM_NU.sorted.minus $readsFile $qualFile $mainResultDir/RUM_NU_minus.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");

    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_NU_minus.sam_tmp > $mainResultDir/RUM_NU_minus.sam");

    unlink("$mainResultDir/RUM_NU_minus.sam_tmp");

   if (!-e "$mainResultDir/RUM_NU_plus.bam") {
	unlink("$mainResultDir/RUM_NU_plus.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_NU_plus.sam > $mainResultDir/RUM_NU_plus.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_plus.bam_tmp $mainResultDir/RUM_NU_plus.bam");
    }
    if (!-e "$mainResultDir/RUM_NU_plus.sorted.bam") {
	unlink("$mainResultDir/RUM_NU_plus.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_NU_plus.bam $mainResultDir/RUM_NU_plus.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_plus.sorted_tmp.bam $mainResultDir/RUM_NU_plus.sorted.bam");
	unlink("$mainResultDir/RUM_NU_plus.bam")
    }
    if (!-e "$mainResultDir/RUM_NU_plus.bedgraph") {
	unlink("$mainResultDir/RUM_NU_plus.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_NU_plus.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_NU_plus.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_plus.bedgraph_tmp $mainResultDir/RUM_NU_plus.bedgraph");
	unlink("$mainResultDir/RUM_NU_plus.sorted.bam")
    }

    #if (!-e "$mainResultDir/RUM_NU_plus.bw") {
    #	unlink("$mainResultDir/RUM_NU_plus.bw_tmp");
    #	&runCmd("bedGraphToBigWig $mainResultDir/RUM_NU_plus.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_NU_plus.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
    #	&runCmd("/bin/mv $mainResultDir/RUM_NU_plus.bw_tmp $mainResultDir/RUM_NU_plus.bw");
    #    }
   if (!-e "$mainResultDir/RUM_NU_minus.bam") {
	unlink("$mainResultDir/RUM_NU_minus.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_NU_minus.sam > $mainResultDir/RUM_NU_minus.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_minus.bam_tmp $mainResultDir/RUM_NU_minus.bam");
    }
    if (!-e "$mainResultDir/RUM_NU_minus.sorted.bam") {
	unlink("$mainResultDir/RUM_NU_minus.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_NU_minus.bam $mainResultDir/RUM_NU_minus.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_minus.sorted_tmp.bam $mainResultDir/RUM_NU_minus.sorted.bam");
	unlink("$mainResultDir/RUM_NU_minus.bam");
    }
   if (!-e "$mainResultDir/RUM_NU_minus.bedgraph") {
	unlink("$mainResultDir/RUM_NU_minus.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_NU_minus.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_NU_minus.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_NU_minus.bedgraph_tmp $mainResultDir/RUM_NU_minus.bedgraph");
	unlink("$mainResultDir/RUM_NU_minus.sorted.bam");
    }

    #if (!-e "$mainResultDir/RUM_NU_minus.bw") {
    #	unlink("$mainResultDir/RUM_NU_minus.bw_tmp");
    #	&runCmd("bedGraphToBigWig $mainResultDir/RUM_NU_minus.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_NU_minus.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
    #	&runCmd("/bin/mv $mainResultDir/RUM_NU_minus.bw_tmp $mainResultDir/RUM_NU_minus.bw");
    #    }
}else {
    &runCmd("perl $perlScriptsDir/rum2sam.pl $mainResultDir/RUM_Unique.sorted none $readsFile $qualFile $mainResultDir/RUM_Unique.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");

    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_Unique.sam_tmp > $mainResultDir/RUM_Unique.sam");

    &runCmd("perl $perlScriptsDir/rum2sam.pl none $mainResultDir/RUM_NU.sorted $readsFile $qualFile $mainResultDir/RUM_NU.sam_tmp 2>> $mainResultDir/PostProcessing-errorlog");

    &runCmd("cat $mainResultDir/sam_header $mainResultDir/RUM_NU.sam_tmp > $mainResultDir/RUM_NU.sam");

   if (!-e "$mainResultDir/RUM_Unique.bam") {
	unlink("$mainResultDir/RUM_Unique.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_Unique.sam > $mainResultDir/RUM_Unique.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique.bam_tmp $mainResultDir/RUM_Unique.bam");
    }
    if (!-e "$mainResultDir/RUM_Unique.sorted.bam") {
	unlink("$mainResultDir/RUM_Unique.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_Unique.bam $mainResultDir/RUM_Unique.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique.sorted_tmp.bam $mainResultDir/RUM_Unique.sorted.bam");
    }
   if (!-e "$mainResultDir/RUM_Unique.bedgraph") {
	unlink("$mainResultDir/RUM_Unique.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_Unique.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_Unique.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique.bedgraph_tmp $mainResultDir/RUM_Unique.bedgraph");
    }

    if (!-e "$mainResultDir/RUM_Unique.bw") {
	unlink("$mainResultDir/RUM_Unique.bw_tmp");
	&runCmd("bedGraphToBigWig $mainResultDir/RUM_Unique.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_Unique.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_Unique.bw_tmp $mainResultDir/RUM_Unique.bw");
    }
   if (!-e "$mainResultDir/RUM_NU.bam") {
	unlink("$mainResultDir/RUM_NU.bam_tmp");
	&runCmd("samtools view -b -S $mainResultDir/RUM_NU.sam > $mainResultDir/RUM_NU.bam_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU.bam_tmp $mainResultDir/RUM_NU.bam");
    }
    if (!-e "$mainResultDir/RUM_NU.sorted.bam") {
	unlink("$mainResultDir/RUM_NU.sorted_tmp.bam");
	&runCmd("samtools sort $mainResultDir/RUM_NU.bam $mainResultDir/RUM_NU.sorted_tmp");
	&runCmd("/bin/mv $mainResultDir/RUM_NU.sorted_tmp.bam $mainResultDir/RUM_NU.sorted.bam");
    }
   if (!-e "$mainResultDir/RUM_NU.bedgraph") {
	unlink("$mainResultDir/RUM_NU.bedgraph_tmp");
	&runCmd("genomeCoverageBed -bg -ibam $mainResultDir/RUM_NU.sorted.bam -g $topLevelSeqSizeFile >$mainResultDir/RUM_NU.bedgraph_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_NU.bedgraph_tmp $mainResultDir/RUM_NU.bedgraph");
    }

    if (!-e "$mainResultDir/RUM_NU.bw") {
	unlink("$mainResultDir/RUM_NU.bw_tmp");
	&runCmd("bedGraphToBigWig $mainResultDir/RUM_NU.bedgraph $topLevelSeqSizeFile $mainResultDir/RUM_NU.bw_tmp 2>> $mainResultDir/PostProcessing-errorlog");
	&runCmd("/bin/mv $mainResultDir/RUM_NU.bw_tmp $mainResultDir/RUM_NU.bw");
    }

}

# cleanup temp files
$date = `date`; chomp $date;
print STDERR "[$date] Cleaning up temp files\n";

for (my $j=1; $j<$numchunks+1; $j++) {
  `rm RUM_Unique.sorted.$j`;
  `rm RUM_NU.sorted.$j`;
}    
if ($haveTranscripts) {
  `rm quant*`;
  if ($strandSpecific) {
    `rm feature_quantifications.ps`;
    `rm feature_quantifications.ms`;
    `rm feature_quantifications.pa`;
    `rm feature_quantifications.ma`;
    `rm feature_quantifications_normalized.ps`;
    `rm feature_quantifications_normalized.ms`;
    `rm feature_quantifications_normalized.pa`;
    `rm feature_quantifications_normalized.ma`;
  }
}
`rm RUM.sam*`;
`rm chr_counts*`;
`rm sam_header*`;

$date = `date`; chomp $date;
}# end of 

print STDERR "[$date] Post processing steps complete\n";
chdir("$currDir") || die "$!";

sub sortResultFiles {
  my ($fn) = @_;  ##takes in string to do ls with
  my @files = `ls $fn`;
  my @tmp;
  foreach my $f (@files){
    next if !($f  =~ /\d$/);
    chomp $f;
    next if !($f  =~ /\d$/);
    if($f =~ /[a-zA-Z]\.(\d+)/){
      push(@tmp,[$f,$1]);
    }else{
      die "ERROR sorting result files";
    }
  }
  my @sort;
  foreach my $a (sort{$a->[1] <=> $b->[1]}@tmp){
    push(@sort,$a->[0]);
  }
  return @sort;
}

sub isroman($) {
    my $arg = shift;
    $arg ne '' and
      $arg =~ /^(?: M{0,3})
                (?: D?C{0,3} | C[DM])
                (?: L?X{0,3} | X[LC])
                (?: V?I{0,3} | I[VX])$/ix;
}

sub arabic($) {
    my $arg = shift;
    my %roman2arabic = qw(I 1 V 5 X 10 L 50 C 100 D 500 M 1000);
    my %roman_digit = qw(1 IV 10 XL 100 CD 1000 MMMMMM);
    my @figure = reverse sort keys %roman_digit;
    $roman_digit{$_} = [split(//, $roman_digit{$_}, 2)] foreach @figure;
    isroman $arg or return undef;
    my $last_digit = 1000;
    my $arabic=0;
    foreach (split(//, uc $arg)) {
        my ($digit) = $roman2arabic{$_};
        $arabic -= 2 * $last_digit if $last_digit < $digit;
        $arabic += ($last_digit = $digit);
    }
    $arabic;
}

sub Roman($) {
    my $arg = shift;
    my %roman2arabic = qw(I 1 V 5 X 10 L 50 C 100 D 500 M 1000);
    my %roman_digit = qw(1 IV 10 XL 100 CD 1000 MMMMMM);
    my @figure = reverse sort keys %roman_digit;
    $roman_digit{$_} = [split(//, $roman_digit{$_}, 2)] foreach @figure;
    0 < $arg and $arg < 4000 or return undef;
    my $roman="";
    my $x;
    foreach (@figure) {
        my ($digit, $i, $v) = (int($arg / $_), @{$roman_digit{$_}});
        if (1 <= $digit and $digit <= 3) {
            $roman .= $i x $digit;
        } elsif ($digit == 4) {
            $roman .= "$i$v";
        } elsif ($digit == 5) {
            $roman .= $v;
        } elsif (6 <= $digit and $digit <= 8) {
            $roman .= $v . $i x ($digit - 5);
        } elsif ($digit == 9) {
            $roman .= "$i$x";
        }
        $arg -= $digit * $_;
        $x = $i;
    }
    $roman;
}

sub roman($) {
    lc Roman shift;
}

sub cmpChrs () {
    my $a2_c = lc($b);
    my $b2_c = lc($a);
    if($a2_c =~ /^\d+$/ && !($b2_c =~ /^\d+$/)) {
        return 1;
    }
    if($b2_c =~ /^\d+$/ && !($a2_c =~ /^\d+$/)) {
        return -1;
    }
    if($a2_c =~ /^[ivxym]+$/ && !($b2_c =~ /^[ivxym]+$/)) {
        return 1;
    }
    if($b2_c =~ /^[ivxym]+$/ && !($a2_c =~ /^[ivxym]+$/)) {
        return -1;
    }
    if($a2_c eq 'm' && ($b2_c eq 'y' || $b2_c eq 'x')) {
        return -1;
    }
    if($b2_c eq 'm' && ($a2_c eq 'y' || $a2_c eq 'x')) {
        return 1;
    }
    if($a2_c =~ /^[ivx]+$/ && $b2_c =~ /^[ivx]+$/) {
        $a2_c = "chr" . $a2_c;
        $b2_c = "chr" . $b2_c;
    }
   if($a2_c =~ /$b2_c/) {
	return -1;
    }
    if($b2_c =~ /$a2_c/) {
	return 1;
    }
    # dealing with roman numerals starts here

    if($a2_c =~ /chr([ivx]+)/ && $b2_c =~ /chr([ivx]+)/) {
	$a2_c =~ /chr([ivx]+)/;
	my $a2_roman = $1;
	$b2_c =~ /chr([ivx]+)/;
	my $b2_roman = $1;
	my $a2_arabic = arabic($a2_roman);
    	my $b2_arabic = arabic($b2_roman);
	if($a2_arabic > $b2_arabic) {
	    return -1;
	} 
	if($a2_arabic < $b2_arabic) {
	    return 1;
	}
	if($a2_arabic == $b2_arabic) {
	    my $tempa = $a2_c;
	    my $tempb = $b2_c;
	    $tempa =~ s/chr([ivx]+)//;
	    $tempb =~ s/chr([ivx]+)//;
	    my %temphash;
	    $temphash{$tempa}=1;
	    $temphash{$tempb}=1;
	    foreach my $tempkey (sort {cmpChrs($a,$b)} keys %temphash) {
		if($tempkey eq $tempa) {
		    return 1;
		} else {
		    return -1;
		}
	    }
	}
    }

    if($b2_c =~ /chr([ivx]+)/ && !($a2_c =~ /chr([a-z]+)/) && !($a2_c =~ /chr(\d+)/)) {
	return -1;
    }
    if($a2_c =~ /chr([ivx]+)/ && !($b2_c =~ /chr([a-z]+)/) && !($b2_c =~ /chr(\d+)/)) {
	return 1;
    }
    # roman numerals ends here
    if($a2_c =~ /chr(\d+)$/ && $b2_c =~ /chr.*_/) {
        return 1;
    }
    if($b2_c =~ /chr(\d+)$/ && $a2_c =~ /chr.*_/) {
        return -1;
    }
    if($a2_c =~ /chr([a-z])$/ && $b2_c =~ /chr.*_/) {
        return 1;
    }
    if($b2_c =~ /chr([a-z])$/ && $a2_c =~ /chr.*_/) {
        return -1;
    }
    if($a2_c =~ /chr(\d+)/) {
        my $numa = $1;
        if($b2_c =~ /chr(\d+)/) {
            my $numb = $1;
            if($numa < $numb) {return 1;}
	    if($numa > $numb) {return -1;}
	    if($numa == $numb) {
		my $tempa = $a2_c;
		my $tempb = $b2_c;
		$tempa =~ s/chr\d+//;
		$tempb =~ s/chr\d+//;
		my %temphash;
		$temphash{$tempa}=1;
		$temphash{$tempb}=1;
		foreach my $tempkey (sort {cmpChrs($a,$b)} keys %temphash) {
		    if($tempkey eq $tempa) {
			return 1;
		    } else {
			return -1;
		    }
		}
	    }
        } else {
            return 1;
        }
    }
    if($a2_c =~ /chrx(.*)/ && ($b2_c =~ /chr(y|m)$1/)) {
	return 1;
    }
    if($b2_c =~ /chrx(.*)/ && ($a2_c =~ /chr(y|m)$1/)) {
	return -1;
    }
    if($a2_c =~ /chry(.*)/ && ($b2_c =~ /chrm$1/)) {
	return 1;
    }
    if($b2_c =~ /chry(.*)/ && ($a2_c =~ /chrm$1/)) {
	return -1;
    }
    if($a2_c =~ /chr\d/ && !($b2_c =~ /chr[^\d]/)) {
	return 1;
    }
    if($b2_c =~ /chr\d/ && !($a2_c =~ /chr[^\d]/)) {
	return -1;
    }
    if($a2_c =~ /chr[^xy\d]/ && (($b2_c =~ /chrx/) || ($b2_c =~ /chry/))) {
        return -1;
    }
    if($b2_c =~ /chr[^xy\d]/ && (($a2_c =~ /chrx/) || ($a2_c =~ /chry/))) {
        return 1;
    }
    if($a2_c =~ /chr(\d+)/ && !($b2_c =~ /chr(\d+)/)) {
        return 1;
    }
    if($b2_c =~ /chr(\d+)/ && !($a2_c =~ /chr(\d+)/)) {
        return -1;
    }
    if($a2_c =~ /chr([a-z])/ && !($b2_c =~ /chr(\d+)/) && !($b2_c =~ /chr[a-z]+/)) {
        return 1;
    }
    if($b2_c =~ /chr([a-z])/ && !($a2_c =~ /chr(\d+)/) && !($a2_c =~ /chr[a-z]+/)) {
        return -1;
    }
    if($a2_c =~ /chr([a-z]+)/) {
        my $letter_a = $1;
        if($b2_c =~ /chr([a-z]+)/) {
            my $letter_b = $1;
            if($letter_a lt $letter_b) {return 1;}
	    if($letter_a gt $letter_b) {return -1;}
        } else {
            return -1;
        }
    }
    my $flag_c = 0;
    while($flag_c == 0) {
        $flag_c = 1;
        if($a2_c =~ /^([^\d]*)(\d+)/) {
            my $stem1_c = $1;
            my $num1_c = $2;
            if($b2_c =~ /^([^\d]*)(\d+)/) {
                my $stem2_c = $1;
                my $num2_c = $2;
                if($stem1_c eq $stem2_c && $num1_c < $num2_c) {
                    return 1;
                }
                if($stem1_c eq $stem2_c && $num1_c > $num2_c) {
                    return -1;
                }
                if($stem1_c eq $stem2_c && $num1_c == $num2_c) {
                    $a2_c =~ s/^$stem1_c$num1_c//;
                    $b2_c =~ s/^$stem2_c$num2_c//;
                    $flag_c = 0;
                }
            }
        }
    }
    if($a2_c le $b2_c) {
	return 1;
    }
    if($b2_c le $a2_c) {
	return -1;
    }


    return 1;
}

